
1.知道文字的  x，y 坐标后，通过下面这个方法生成加密参数

coord: f(this.$store.state.token, [Math.round(t), Math.round(n), s.now() - this.beginTime] + "")

其中最主要是这里：
    [文字 x 坐标整数, 文字 y 坐标整数， 所经过的时间差，毫秒]
    [Math.round(t), Math.round(n), s.now() - this.beginTime]

函数 f 就是跟之前滑动的一模一样的：

    function n(e, t) {
        function n(e, t) {
            return e.charCodeAt(Math.floor(t % e.length))
        }
        function i(e, t) {
            return t.split("").map(function(t, i) {
                return t.charCodeAt(0) ^ n(e, i)
            })
        }
        return t = i(e, t),
        _(t)
    }


2.上面的解析都是针对于源代码：

    addPoint: function(e) {
        var t = e.left
          , n = e.top;
        this.pointsStack.length || this.$parent.getAnticheatToken({
            timeout: 1e3
        });
        var i = this.pointsStack.length + 1;
        if (!(i > this.MAX_POINTS)) {
            var r = document.createElement("div");
            r.className = "yidun_icon-point yidun_point-" + i,
            a.css(r, "left: " + (t - 10) + "px; top: " + (n - 25) + "px;"),
            this.$bgImg.appendChild(r);
            debugger;
            this.pointsStack.push({
                el: r,
                coord: f(this.$store.state.token, [Math.round(t), Math.round(n), s.now() - this.beginTime] + "")
            }),
            this.shouldVerifyCaptcha()
        }
    },
    shouldVerifyCaptcha: function() {
        var e = this.pointsStack;
        if (e.length === this.MAX_POINTS) {
            var t = e.map(function(e) {
                return e.coord
            })
              , n = this.traceData;
            debugger;
            this.onVerifyCaptcha({
                data: JSON.stringify({
                    d: "",
                    m: u(s.sample(n, h).join(":")),
                    p: u(t.join(":")),  // 这里是将前面每个文字的加密后的参数，用于 : 来连接起来，再用 u 函数去加密, u 函数就是之前的 B 函数
                    ext: u(f(this.$store.state.token, this.clickCounts + "," + n.length))
                })
            })
        }
    }
